Commit for 
Added Local Tunneling using Ngrok : 
 * ngrok allows you to expose your local development environment to the public internet securely. 
 * This means you can access your application or website running on your machine (localhost) from anywhere in the world through an ngrok-generated URL. 
 * This is particularly useful for:
-- collaborating with others
-- Testing APIs
-- Public demos

Installing Ngrok by : 
-- Downloading the zip file
-- Setting the system env variable path of the folder address where the ngrok.exe is present
-- Make an account on Ngrok for getting your own Authtoken 
   --- Put it in the terminal and specify the port number (same as your application )
   ## Make sure to keep the app running in localhost 
   --- A Forwading link will be generated everytime we launch ngrok 
-- Go to the Domains section in Cloud Edge of Ngrok dashboard and get a new domain which is free but and only 1 per account
   --- Use that URL and specify the port number in the end
   ## This is just so that we dont always generate new Forwading links when accessing through Ngrok

-------------------------------------------------------------------------------------------------------------------------------------------------
Commit for 
Configuring Webhooks : 

* Webhooks are like automated messengers for websites and applications. 
* They allow them to communicate with each other instantly whenever something specific happens.
* Think of them as little robots that are constantly listening for events and then sending out notifications when those events occur.

Clerk Webhooks : 

## Everyday stuff 
-- Run = npm run dev
-- Run = Domain link from Ngrok

--- In the Clerk Dashboard go to the Webhooks section and hit - create new 
--- Get the perma domain from the running ngrok terminal and put in the Endpoints field of Clerk followed by - /api/webhooks/clerk
--- Enable all the User event in the Messge Filtering section below; Click Create
--- Copy the Sign-In Secret and rename it to CLERK_WEBHOOK_SECRET in the env file 
--- Install the svix library using - npm install svix
--- Make a folder structure in the App directort - app\api\webhooks\clerk\route.ts 
--- To enable Nextjs to be able to send Messages in the middleware file add this in the authMiddleware object :
   == publicRoutes: ["/api/webhooks(.*)"]
--- Write the necessary conditionals in the route.ts file to manage the CRUD ops of the user for the main app & reflect changes in the DB 

---------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 
Sidebar :

-- Installing the Zustand Library ( npm i zustand ) :
   --- State management library for React applications.
   --- It offers a simple and efficient way to manage application state without the complexity of larger libraries. 

-- Installing the Usehooks Library (npm i usehooks-ts) :
   --- React hook library written in TypeScript.
   --- It provides a collection of ready-to-use hooks for common tasks in React applications.

-----------------------------------------------------------------------------------------------------------------------------------------------------

Commit For 
Follower Service :

-- Using Server Actions to handle the API-less mutations :
   ###  Mutation refers to any operation that modifies data on the server.
   --- "api-less mutations" refers to the ability to perform data mutations on the server without needing to define explicit API routes.
   ---  This is possible because server actions themselves act as endpoints for receiving data and performing mutations.
   ---  Server actions in Next.js enable "api-less mutations" by removing the need for explicit API routes to handle data mutations on the server. 

-- Installing the Sonner (npm i sonner):
   --- An opinionated toast component for React.
   --- It's a popular library for displaying informative messages and notifications within your React applications.

   
------------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 
Creator Dashboard :

-- Using usePathname Hook :
   --- The usePathname hook in Next.js is part of the new Client Components feature introduced in Next.js 13. 
   --- It lets you read the current URL's pathname directly within your React component. 
   --- Provides a convenient way to access the current URL path within your Next.js application.

------------------------------------------------------------------------------------------------------------------------------------------------------
Commit for 
Chat & Key Setting :

--- Completed the sub-sections(Key & Chat) 
   -- Added Key selection, generation, modal for closing and creating connection (FrontEnd)
   -- Added buttons for Chat options like - Delay, Follower Only, Enable-Disable Entirely (FrontEnd & DB Sync) 
   -- Made a Temp Route to the Stream sub-section 

------------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 
Livekit Setup and Config :

--- Integrated the Livekit SDK ("npm i @livekit/components-react" | "npm i livekit-client" | "npm i livekit-server-sdk " ) for :
   -- Real-time communication platform that enables developers to build interactive audio and video experiences into their applications. 
   -- It provides a set of tools and APIs for handling all the complexities of real-time communication, allowing developers to focus on building engaging features and user    interfaces.
   -- Used here for the generation of Server URL and Stream Key based on the type of protocol - RTPC(Real Time Trans Pro) and/or WHIP()
   -- Manages sessions and rooms: Creates and manages live sessions, including participant join/leave actions, room management, and session configuration.
   -- Routes and distributes media streams: Receives audio and video streams from clients, processes them, and routes them efficiently to all participants in the session.
   -- Security and moderation: Implements user authentication, authorization, and session security measures, as well as providing tools for moderation and managing participant behavior.

--- Used useTransiton Hook :
   -- useTransition is a new React Hook introduced in React 18 that allows you to manage the priority and timing of state updates.
   --  It helps you prioritize critical updates that need to be displayed immediately and defer less important updates that can be rendered later, improving the perceived responsiveness of your application.

--- Used useRef Hook :
   -- useRef is a hook that lets you create a mutable reference to a value.
   -- This means you can store a value and update it later without triggering a re-render of the component.

-------------------------------------------------------------------------------------------------------------------------------------------------------

Commit for
LiveKit Webhook :

--- The RoomServiceClient is used to interact with LiveKit rooms.
   -- It lists and deletes existing rooms associated with a given host identity.
   -- This is crucial for setting up a clean state before starting a new streaming session.

--- createIngress function is a key part of starting the streaming process.
   -- Resets existing ingresses related to the user.
   -- Configures new ingress options based on the provided ingressType.
   -- This includes setting up video and audio sources and encoding presets. 
      -For example, video options might include using a camera as a source and specifying the video encoding preset.
   -- Creates a new ingress object using these options.
   -- Throws an error if the ingress creation fails, which is a crucial check to ensure the streaming setup is correct.

----------------------------------------------------------------------------------------------------------------------------------------------------------

Commit For 
Granting Viewer Token : 

--- Access Token function (import { AccessToken } from "livekit-server-sdk") :
   -- Plays a crucial role in managing access tokens for your LiveKit server application
   -- Access tokens act as digital keys that grant users or applications permission to perform specific actions within your LiveKit server.
   -- By requiring valid access tokens for authorized access, you can improve the security of your LiveKit server and prevent unauthorized access to resources.
   -- Access tokens can be used to manage user sessions and associate them with specific permissions within the LiveKit environment.

--- Using the UUID Package (npm i uuid ) :
   -- Manages the generation and handling of Universally Unique Identifiers (UUIDs) in your JavaScript projects.
   -- UUIDs are unique strings used to identify different entities in your application, ensuring they don't clash
   -- You can choose to generate UUIDs in versions 1 (timestamp-based), 4 (randomly generated), 5 (namespace-based) == I used V4
   -- This helps in 
      - Guaranteed uniqueness: UUIDs ensure unique identification for your entities, preventing conflicts and errors.
      - Improved data consistency: Consistent identifiers simplify data management and retrieval within your application.
      - Enhanced security: Randomly generated UUIDs can enhance security by preventing predictable identifiers.
      - Simpler code and reduced errors: The provided API makes working with UUIDs easier and less prone to errors.

--- Using JWT Decode Package ( npm i jwt-decode ) :
   -- Decoding JSON Web Tokens (JWTs) in JavaScript.
   -- It helps you extract the payload data from a JWT token without the need for a full-fledged JWT library like jsonwebtoken.
   -- Also helps by :
      - Simple and lightweight: Easy to install and use, with minimal impact on your application's size and complexity.
      - Fast and efficient: Decodes tokens quickly and efficiently without any heavy processing overhead.
      - Focused on payload extraction: Solely focuses on extracting the payload data, making it ideal for situations where you only need the token's content.
      - Independent of JWT libraries: Can be used independently of other JWT libraries like jsonwebtoken, providing a simpler solution for basic token decoding.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 
Video Player (Finally ffs) :

--- Added the main video player by rendering it from the streaming service like OBS
--- Added the volume controls for conditionally modifying the volume icon states based on the volume level 
--- Added the fullscreen functionality for toggling fullscreen through the button and/or Esc Key 
--- Added conditional components based on the state of the stream - loading, offline, online (video player)
--- Added Guest authorization and access token provision based on if they are logged-in or not using UUID
--- Added conditional ability to be able to watch the stream if you, the guest happen to be banned by the streamer(host)
--- Added some misc security measures for the client-side components (route.ts of LiveKit API folder) where sensitive data was being exposed
--- Added functionality for the screen - video and audio (user mic & pc sounds) are functioning properly with minimal lag 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 
Chat functionality :

--- Using the Date FNS package (npm i date-fns) :
   -- Date-fns is a popular JavaScript library that provides a rich set of functions for manipulating and formatting dates and times.
   -- Its features include :
      - Parse and format dates: Easily convert between human-readable formats and JavaScript timestamps.
      - Add and subtract time: Work with durations, intervals, and timezones with ease.
      - Relative dates: Express dates in relative terms like "yesterday" or "next week".
      - Localization: Format dates according to different locales and conventions. 
      - Immutable API: Maintain predictable code behavior by avoiding mutations.

--- Added Chat Sidebar to be able to Expand and Collapse the Chat
--- Added the Community-Chat Toggle Button
--- Added the Chat Box with timestamp based chatting and uniquely color coded usernames for the person chatting 
--- Added the device friendly layouts for the chats 
--- Added reactive chat being enabled or disabled based on the status of the host being Live or offline
--- Added conditional labels for the chat based on - Followers Only and/or Slow Mode


----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 
Community Toggle Section :

--- Using the Debounce package (import { useDebounce } from 'usehooks-ts') :
   -- useDebounce is a React hook provided by the usehooks-ts library.
   -- It helps delay the execution of a function or an update to a state variable until a certain amount of time has passed since the last event that triggered 
   -- Its useful in the cases like :
      - Preventing unnecessary API calls: If you have an input field where users type, you might want to delay sending an API request for search results until they stop typing for a moment, saving unnecessary server and network resources.

      - Debounced form validation: Delaying validation of user input in a form until they finish typing can improve user experience, providing feedback only when the whole input is complete.
      
      - Smooth animations: By debouncing state updates in animation-driven components, you can create smoother and more efficient transitions.

--- Added the Community section toggle in the Chat Sidebar
--- Added ability to view all the participants of the stream 
--- Added ability to block any user (FrontEnd)
--- Added ability to search any user in the stream 
--- Added plathora of skeletons for various sections of the stream player and chat sidebar responsive to devices
--- Added scroll area section from Shadcn UI for the chat and community section 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 
Stream Header :

--- Added the Stream header to show the State of the stream page 
--- Included the Avatar of the streamer
--- Included the name of the stream room 
--- Added the viewer count 
--- Added a verification badge to show authentication
--- Added the functional follow button (Front and Back)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 

Stream Info Card :

--- Added the separated section for the fields of information of the stream itself like - name and thumbnail 
--- Added a modal subsection to edit the Title 
--- Added a modal subsection to add and/or remove the stream thumbnail

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 

User / Trottor Channel Page :

--- Added the user bio editor modal 
--- Added the final user page details from Dashboard to the channel page 
--- Added ability to block any User by the host 
--- Added the abliity to remove the streamer from the Following/Recommended section upon being blocked by that host 
--- Added the ablility to disconnect the blocked user in real time and showing a 404 when trying to rewatch
--- Added the ablility to follow and unfollow the streamer (Front & Back)
--- Added the global 404 page 
--- Added the channel specific 404 page 
--- Added the Error pages for rare cases 
--- Added the working toggles for chat - follwers only, slow mode & both (Front and Back)
--- Added the followers count of the streamer 
--- Added the abliity to upload thumbnails for the stream (Uploadthing)
--- Added the ability to edit the title, thumnail, bio of the stream(er)


----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 

Home Page / Landing Page

--- Added a dynamicly updated home page listing all the live and offline streamers 
--- Added skeletons for the home page 
--- Added the ability to not see the stream's of the host if they have blocked you on the home page aswell 
--- Added an extensive and responsive home page streamer 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 

Search Page "

--- Added the search term page 
--- Added the abilty to retrieve the streamer page using Search Bar (Font & Back )
--- Added the ability to view the online or offline streamer pages 
--- Added the ability to see since how long has it been since they streamed 
--- Added the ability to be able to search a stream if the search term is remotely accurate
--- Added the ability to redirect the to home page user who tried to go to 3000/search
--- Added the ability to view only those streamer in the search results who havent banned you