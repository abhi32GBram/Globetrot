Commit for 
Added Local Tunneling using Ngrok : 
 * ngrok allows you to expose your local development environment to the public internet securely. 
 * This means you can access your application or website running on your machine (localhost) from anywhere in the world through an ngrok-generated URL. 
 * This is particularly useful for:
-- collaborating with others
-- Testing APIs
-- Public demos

Installing Ngrok by : 
-- Downloading the zip file
-- Setting the system env variable path of the folder address where the ngrok.exe is present
-- Make an account on Ngrok for getting your own Authtoken 
   --- Put it in the terminal and specify the port number (same as your application )
   ## Make sure to keep the app running in localhost 
   --- A Forwading link will be generated everytime we launch ngrok 
-- Go to the Domains section in Cloud Edge of Ngrok dashboard and get a new domain which is free but and only 1 per account
   --- Use that URL and specify the port number in the end
   ## This is just so that we dont always generate new Forwading links when accessing through Ngrok

-------------------------------------------------------------------------------------------------------------------------------------------------
Commit for 
Configuring Webhooks : 

* Webhooks are like automated messengers for websites and applications. 
* They allow them to communicate with each other instantly whenever something specific happens.
* Think of them as little robots that are constantly listening for events and then sending out notifications when those events occur.

Clerk Webhooks : 

## Everyday stuff 
-- Run = npm run dev
-- Run = Domain link from Ngrok

--- In the Clerk Dashboard go to the Webhooks section and hit - create new 
--- Get the perma domain from the running ngrok terminal and put in the Endpoints field of Clerk followed by - /api/webhooks/clerk
--- Enable all the User event in the Messge Filtering section below; Click Create
--- Copy the Sign-In Secret and rename it to CLERK_WEBHOOK_SECRET in the env file 
--- Install the svix library using - npm install svix
--- Make a folder structure in the App directort - app\api\webhooks\clerk\route.ts 
--- To enable Nextjs to be able to send Messages in the middleware file add this in the authMiddleware object :
   == publicRoutes: ["/api/webhooks(.*)"]
--- Write the necessary conditionals in the route.ts file to manage the CRUD ops of the user for the main app & reflect changes in the DB 

---------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 
Sidebar :

-- Installing the Zustand Library ( npm i zustand ) :
   --- State management library for React applications.
   --- It offers a simple and efficient way to manage application state without the complexity of larger libraries. 

-- Installing the Usehooks Library (npm i usehooks-ts) :
   --- React hook library written in TypeScript.
   --- It provides a collection of ready-to-use hooks for common tasks in React applications.

-----------------------------------------------------------------------------------------------------------------------------------------------------

Commit For 
Follower Service :

-- Using Server Actions to handle the API-less mutations :
   ###  Mutation refers to any operation that modifies data on the server.
   --- "api-less mutations" refers to the ability to perform data mutations on the server without needing to define explicit API routes.
   ---  This is possible because server actions themselves act as endpoints for receiving data and performing mutations.
   ---  Server actions in Next.js enable "api-less mutations" by removing the need for explicit API routes to handle data mutations on the server. 

-- Installing the Sonner (npm i sonner):
   --- An opinionated toast component for React.
   --- It's a popular library for displaying informative messages and notifications within your React applications.

   
------------------------------------------------------------------------------------------------------------------------------------------------------

Commit for 
Creator Dashboard :

-- Using usePathname Hook :
   --- The usePathname hook in Next.js is part of the new Client Components feature introduced in Next.js 13. 
   --- It lets you read the current URL's pathname directly within your React component. 
   --- Provides a convenient way to access the current URL path within your Next.js application.

   