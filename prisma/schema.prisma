// Database configuration
datasource db {
  provider     = "mysql" // Specify database type
  url          = env("DATABASE_URL") // Use environment variable for database URL
  relationMode = "prisma" // Enable Prisma relationship handling
}

// Client-side code generation
generator client {
  provider = "prisma-client-js" // Generate TypeScript client for Prisma interactions
}

// User model definition
model User {
  // Unique ID
  id String @id @default(uuid())

  // Username (unique)
  username String @unique

  // User's profile picture URL
  imageUrl String @db.Text

  // External user ID (e.g., from social login)
  externalUserId String @unique

  // User bio (optional)
  bio String? @db.Text

  // Following relationships
  following Follow[] @relation("Following")

  // Followers
  followedBy Follow[] @relation("FollowedBy")

  // Blocking relationships (users they block)
  blocking Block[] @relation("Blocking")

  // Users who block this user
  blockedBy Block[] @relation("BlockedBy")

  // Creation timestamp
  createdAt DateTime @default(now())

  // Last updated timestamp
  updatedAt DateTime @updatedAt
}

// Follow model definition
model Follow {
  // Unique ID
  id String @id @default(uuid())

  // Follower user ID
  followerId String

  // User being followed ID
  followingId String

  // Related User objects (follower and following)
  follower  User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  // Creation timestamp
  createdAt DateTime @default(now())

  // Last updated timestamp
  updatedAt DateTime @updatedAt

  // Unique constraint on follower-following combination
  @@unique([followerId, followingId])
  // Indexes for faster follower and following lookup
  @@index([followerId])
  @@index([followingId])
}

// Block model definition
model Block {
  // Unique ID
  id String @id @default(uuid())

  // User blocking another user ID
  blockerId String

  // User being blocked ID
  blockedId String

  // Related User objects (blocker and blocked)
  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  // Unique constraint on blocker-blocked combination
  @@unique([blockedId, blockerId])
  // Indexes for faster blocker and blocked lookup
  @@index([blockerId])
  @@index([blockedId])
}
// ---------------------------------------------------------------------------------
// KEEPING THE UN-COMMENTED CODE FOR THE BEING SAFE 
// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model User {
//   id String @id @default(uuid())

//   username       String  @unique
//   imageUrl       String  @db.Text
//   externalUserId String  @unique
//   bio            String? @db.Text

//   following  Follow[] @relation("Following")
//   followedBy Follow[] @relation("FollowedBy")

//   blocking  Block[] @relation("Blocking")
//   blockedBy Block[] @relation("BlockedBy")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Follow {
//   id          String @id @default(uuid())
//   followerId  String
//   followingId String

//   follower  User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
//   following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([followerId, followingId])
//   @@index([followerId])
//   @@index([followingId])
// }

// model Block {
//   id        String @id @default(uuid())
//   blockerId String
//   blockedId String

//   blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
//   blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

//   @@unique([blockedId, blockerId])
//   @@index([blockerId])
//   @@index([blockedId])
// }
